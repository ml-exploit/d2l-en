
Custom Layers
=============

One factor behind deep learning’s success is the availability of a wide
range of layers that can be composed in creative ways to design
architectures suitable for a wide variety of tasks. For instance,
researchers have invented layers specifically for handling images, text,
looping over sequential data, and performing dynamic programming. Sooner
or later, you will need a layer that does not exist yet in the deep
learning framework. In these cases, you must build a custom layer. In
this section, we show you how.

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    import mlx.core as mx
    import mlx.nn as nn
    from d2l import mlx as d2l

Layers without Parameters
-------------------------

To start, we construct a custom layer that does not have any parameters
of its own. This should look familiar if you recall our introduction to
modules in :numref:`sec_model_construction`. The following
``CenteredLayer`` class simply subtracts the mean from its input. To
build it, we simply need to inherit from the base layer class and
implement the forward propagation function.

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    class CenteredLayer(nn.Module):
        def __init__(self):
            super().__init__()
    
        def __call__(self, X):
            return X - X.mean()

Let’s verify that our layer works as intended by feeding some data
through it.

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    layer = CenteredLayer()
    layer(mx.array([1.0, 2, 3, 4, 5]))




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    array([-2, -1, 0, 1, 2], dtype=float32)



We can now incorporate our layer as a component in constructing more
complex models.

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    net = nn.Sequential(nn.Linear(8, 128), CenteredLayer())

As an extra sanity check, we can send random data through the network
and check that the mean is in fact 0. Because we are dealing with
floating point numbers, we may still see a very small nonzero number due
to quantization.

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    Y = net(mx.random.uniform(shape=(4, 8)))
    Y.mean()




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    array(1.39698e-09, dtype=float32)



Layers with Parameters
----------------------

Now that we know how to define simple layers, let’s move on to defining
layers with parameters that can be adjusted through training. We can use
built-in functions to create parameters, which provide some basic
housekeeping functionality. In particular, they govern access,
initialization, sharing, saving, and loading model parameters. This way,
among other benefits, we will not need to write custom serialization
routines for every custom layer.

Now let’s implement our own version of the fully connected layer. Recall
that this layer requires two parameters, one to represent the weight and
the other for the bias. In this implementation, we bake in the ReLU
activation as a default. This layer requires two input arguments:
``in_units`` and ``units``, which denote the number of inputs and
outputs, respectively.

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    class MyLinear(nn.Module):
        def __init__(self, in_units, units):
            super().__init__()
            self.weight = mx.random.normal(shape=(in_units, units))
            self.bias = mx.random.normal(shape=(units,))
    
        def __call__(self, X):
            linear = mx.matmul(X, self.weight) + self.bias
            return nn.relu(linear)

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    linear = MyLinear(5, 3)
    linear.weight




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    array([[0.161859, -1.68987, 1.18379],
           [1.14518, -0.412968, 0.185595],
           [0.550684, -2.01255, 0.641095],
           [0.333075, -0.41537, 1.06249],
           [0.552186, 1.21545, 0.221213]], dtype=float32)



We can directly carry out forward propagation calculations using custom
layers.

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    linear(mx.random.uniform(shape=(2, 5)))




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    array([[1.99846, 0, 2.1563],
           [1.25294, 0, 1.33314]], dtype=float32)



We can also construct models using custom layers. Once we have that we
can use it just like the built-in fully connected layer.

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    net = nn.Sequential(MyLinear(64, 8), MyLinear(8, 1))
    net(mx.random.uniform(shape=(2, 64)))




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    array([[3.92416],
           [0]], dtype=float32)



Summary
-------

We can design custom layers via the basic layer class. This allows us to
define flexible new layers that behave differently from any existing
layers in the library. Once defined, custom layers can be invoked in
arbitrary contexts and architectures. Layers can have local parameters,
which can be created through built-in functions.

Exercises
---------

1. Design a layer that takes an input and computes a tensor reduction,
   i.e., it returns :math:`y_k = \sum_{i, j} W_{ijk} x_i x_j`.
2. Design a layer that returns the leading half of the Fourier
   coefficients of the data.
